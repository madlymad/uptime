//apply from: "$rootDir/build.gradle"

def reportsDirectory = "$buildDir/reports/androidTests/connected"
def screenshotDirectory = '/sdcard/Pictures/uptime'

def adbDir = {
    def rootDir = project.rootDir
    def localProperties = new File(rootDir, "local.properties")
    if (localProperties.exists()) {
        Properties properties = new Properties()
        localProperties.withInputStream {
            instr -> properties.load(instr)
        }
        def sdkDir = properties.getProperty('sdk.dir')
        return "$sdkDir/platform-tools/adb"
    }
}

def embedScreenshotsTask = task('embedScreenshots', group: 'reporting') {
    doFirst {
        def failureScreenshotsDirectory = new File(reportsDirectory, 'screenshots/failures')

        if (!failureScreenshotsDirectory.exists()) {
            println 'Could not find screenshot failures. Skipping...'
            return
        }

        failureScreenshotsDirectory.eachFile { failedTestClassDirectory ->
            def failedTestClassName = failedTestClassDirectory.name

            failedTestClassDirectory.eachFile { failedTestFile ->
                def failedTestName = failedTestFile.name
                def failedTestNameWithoutExtension = failedTestName.take(failedTestName.lastIndexOf('.'))
                def failedTestClassJunitReportFile = new File(reportsDirectory, "${failedTestClassName}.html")

                if (!failedTestClassJunitReportFile.exists()) {
                    println "Could not find JUnit report file for test class '${failedTestClassJunitReportFile}'"
                    return
                }

                def failedTestJunitReportContent = failedTestClassJunitReportFile.text

                def patternToFind = "<h3 class=\"failures\">${failedTestNameWithoutExtension}</h3>"
                def patternToReplace = "${patternToFind} <img src=\"screenshots/failures/${failedTestClassName}/${failedTestName}\" width =\"360\" />"

                failedTestJunitReportContent = failedTestJunitReportContent.replaceAll(patternToFind, patternToReplace)

                failedTestClassJunitReportFile.write(failedTestJunitReportContent)
            }
        }
    }
}

def clearScreenshotsTask = task('clearScreenshots', type: Exec) {
    executable "${adbDir}"
    args 'shell', 'rm', '-r', screenshotDirectory
    finalizedBy {
        embedScreenshotsTask
    }
}

def createScreenshotDirectoryTask = task('createScreenshotDirectory', type: Exec, group: 'reporting') {
    executable "${adbDir}"
    args 'shell', 'mkdir', '-p', screenshotDirectory
}

def fetchScreenshotsTask = task('fetchScreenshots', type: Exec, group: 'reporting') {
    executable "${adbDir}"
    args 'pull', screenshotDirectory + "/.", reportsDirectory
    finalizedBy {
        clearScreenshotsTask
    }

    dependsOn {
        createScreenshotDirectoryTask
    }

    doFirst {
        new File(reportsDirectory).mkdirs()
    }
}

tasks.whenTaskAdded { task ->
    if (task.name == 'connectedDebugAndroidTest') {
        task.finalizedBy {
            fetchScreenshotsTask
        }
    }
}
